# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  name: 'Default'

variables:
  - group: backendvariables

  - name: "container_name"
    value: '$(Build.SourceBranchName)' 
  - name: "containersufix"
    value: "-container"
  - name: "tfstate_name"
    value: '$(Build.SourceBranchName)'
  - name: "dottfstate"
    value: ".tfstate"

stages:
  - stage: TerraformInitPlan
    jobs: 
      - job: TerraformInitPlan
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'evertzserviceconnection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az login --identity -u ''$(umi_objectid)'''
# init Terraform task with required parameters.
          - task: TerraformTaskV4@4
            displayName: Terraform-Init-Plan
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: '$(serviceconnection)'
              backendAzureRmResourceGroupName: '$(bknd_rg_name)'
              backendAzureRmStorageAccountName: '$(bknd_strac_name)'
              backendAzureRmContainerName: '$(container_name)$(containersufix)' 
              backendAzureRmKey: '$(tfstate_name)$(dottfstate)'
          - task: AzureCLI@2
            displayName: 'Retrieve Storage Account Access Key'
            inputs:
              azureSubscription: '$(serviceconnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az storage account keys list --account-name $(bknd_strac_name) --query "[0].value" -o tsv
# Start Terraform Plan.
          - task: TerraformTaskV4@4
            displayName: Terraform-Plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: '$(serviceconnection)'

# Start Terraform Destroy.
  - stage: TerraformDestroy
    condition: succeeded('TerraformInitPlan')
    dependsOn: TerraformInitPlan
    jobs:
    - deployment: 'ApprovalforDestroy'
      environment: 'Terraform-Destroy-Approval'
      strategy:
         runOnce:
          deploy:
          #- job: TerraformApply
            steps:
               - task: TerraformTaskV4@4
                 displayName: Terraform-Destroy
                 inputs:
                   provider: 'azurerm'
                   command: 'destroy'
                   environmentServiceNameAzureRM: '$(serviceconnection)'

# Delete Container 
  - stage: DeleteContainer
    jobs: 
      - job: DeleteContainer
        steps:          
          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(serviceconnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                key=$(az storage account keys list --account-name $(bknd_strac_name) --query "[0].value" -o tsv)
                az storage container delete --account-key $key  --account-name $(bknd_strac_name)  --name $(container_name)$(containersufix)